// 좋은 습관 들이기
// 1. 배열이나 객체를 불변하는 객체처럼 다루기: 기존에 있던 데이터는 그대로 두고, 새로운 배열을 만드는 습관을 들이자! 

// 실습 : 다음 코드에서 배열의 원소에 💖 이모지를 추가해보세요
// const aespa = ["카리나", "윈터", "지젤", "닝닝"];
// 결과 : ['카리나💖', '윈터💖', '지젤💖', '닝닝💖']

// 나의 답 
// const aespa = ["카리나", "윈터", "지젤", "닝닝"];

// aespa2 = aespa.map(function (item){
//   return aespa.push(item + "💖")
// })

// aespa.map(console.log);

// 재현님 답
const aespa = ["카리나", "윈터", "지젤", "닝닝"];
aespa.forEach((item, index) => {
  aespa[index] = item + "💖";
})

// 이전 배열을 살려두고 새로운 배열 만들기 
const aespa = ["카리나", "윈터", "지젤", "닝닝"];
const aespa2 = aespa.map((item) => {
  return item + "💖"
});

// 2. 엄격모드 사용하기
// 엄격모드로 사용하는 것을 권장 : 많은 에러를 예방할 수 있다

'use strict'
// 로 선언 

str = "hello strict";
// 키워드 없이 선언도 가능
// 문제점: 무조건 전역변수가 된다

// 엄격모드 특징
// 1. 선언하지 않은 변수에 값을 할당할 수 없습니다.
// 2. 읽기 전용 객체에 값을 할당하면 에러가 발생합니다. (일반 모드에서는 조용한 에러 —> 무시 처리)
// 3. 지울수 없는 값을 지우려고 하면 에러가 발생합니다. (일반 모드에서는 조용한 에러 —> 무시 처리)
// 4. 함수 파라메터에 중복된 이름을 사용할 수 없습니다.

// 3. 일치연산자 사용 == X, === O
1 == 1;
1 == '1';
1 == 2;
'' == false;
[] == false; // 빈 배열은 심지어 truthy 입니다!
null == undefined; 